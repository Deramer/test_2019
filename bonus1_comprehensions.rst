Бонус 1: базовые структуры данных и работа с ними
#################

:date: 2019-10-03 17:05
:summary: Листы, туплы, словари, множества. Comprehensions.
:status: published

.. default-role:: code
.. contents:: Содержание


Структуры данных
============

Структура данных -- это любая штука, которая 1) хранит данные и 2) предоставляет интерфейс для работы с ними. Мы сегодня рассмотрим самые базовые структуры данных в питоне: list, tuple, dict и set.

В этом семинаре будет большое количество примеров кода. Попытайтесь повторить его самостоятельно, попробуйте что-нибудь изменить. Грамотное использование синтаксиса и структур приходит только с опытом.

Теория 1. List
---------------

List -- это массив элементов. Пример:

.. code-block:: python
    >>> list1 = [1, 2.5, 3, 'a', [1, 'cde']]
    >>> list1[0]
    1
    >>> list1[1]
    2.5
    >>> list1[4]
    [1, 'cde']
    >>> list1[4][0]
    0

На этом примере можно увидеть несколько свойств листа:

    * Лист можно создать, перечислив в квадратных скобках его элементы. Если написать просто [], то будет пустой лист.
    * В листе могут храниться элементы разных типов: целые числа, нецелые, строки, другие массивы... В реальном коде так делать крайне нежелательно, но важно понимать, что питон вам не помешает запихнуть что угодно внутрь вашего листа
    * К элементам массива можно обращаться через квадратные скобки с индексом элемента. Индексы начинаются с нуля.
    * Если есть вложенные массивы, можно писать несколько квадратных скобок подряд, типа [4][0].

.. code-block:: python
    >>> list1[-1]
    [1, 'cde']
    >>> list1[-2]
    'a'
    >>> list1[2:4]
    [3, 'a']
    >>> list1[:4]
    [1, 2.5, 3, 'a']
    >>> list1[3:]
    ['a', [1, 'cde']]
    >>> len(list1)
    5

 Тут есть немного магии.
 
    * В качестве индекса можно написать отрицательный элемент, и питон найдёт соответствующий элемент с *конца* массива. -1 -- первый элемент с конца, -2 -- второй элемент с конца, и так далее.
    * Slicing. Внутри квадратных скобок можно указать два индекса через двоеточие. Результатом будет "кусок" массива -- другой массив, в который включены все элементы от первого индекса включительно до второго НЕ включительно. Смотрите внимательно примеры.
    * Если внутри квадратных скобок стоит двоеточие, один (или оба) индекса вокруг него можно не писать. Если нет первого индекса, типа [:4], то результатом будет кусок массива с начала до элемента с индексом 4 - 1. Если нет второго, типа [2:], то результатом будет кусок массива со второго элемента до конца массива. Если нет ни одного индекса, [:], то результатом будет копия исходного массива.
    * Длину массива можно посмотреть функцией len()

.. code-block:: python
    >>> list2 = list(range(5))
    >>> list2
    [0, 1, 2, 3, 4]
    >>> list2.append(10)
    >>> list2
    [0, 1, 2, 3, 4, 10]
    >>> list2[1] = 5
    >>> list2
    [0, 5, 2, 3, 4, 10]
    >>> list2.remove(5)
    >>> list2
    [0, 2, 3, 4, 10]
    >>> list2.pop(1)
    2
    >>> list2
    [0, 3, 4, 10]
    >>> list2.pop()
    10
    >>> list2
    [0, 3, 4]
    >>> list2.insert(1, 42)
    >>> list2
    [1, 42, 3, 4]

Тут перечислены основные способы изменить массив (и один способ его создать).

    * range(n) возвращает массив чисел от 0 до n. (На самом деле, не массив, поэтому вокруг range приходится писать list, но это не тема семинара)
    * Если нужно изменить элемент массива, к нему можно обратиться через квадратные скобки и чему-то приравнять.
    * .append(elem) добавляет elem в конец массива.
    * .insert(index, elem) добавляет elem по индексу index, сдвигая мешающие элементы направо.
    * .remove(elem) убирает самый левый элемент elem
    * .pop(index) убирает элемент по индексу index. Если индекс не написать, .pop() уберёт самый правый элемент массива.

Упражнение 1. Простые числа
-------------

Создайте пустой массив, в который будете записывать простые числа. Для чисел от 2 до 1000 сделайте: если число не делится ни на одно из чисел в массиве простых чисел, добавьте его в массив простых чисел. Выведите результат и проверьте, что там действительно только простые числа.

Упражнение 2. Сортировка выбором
------------

Напишите функцию, которая делает сортировку выбором. Если не знаете, что это, вики в помощь.
PS: Чтобы поменять местами два элемента массива в питоне достаточно написать
.. code-block:: python
    lst[index1], lst[index2] = lst[index2], lst[index1]


Теория 2. Tuple
---------

Tuple -- это неизменяемый массив.

.. code-block:: python
    >>> tpl = (1, 2, 3)
    >>> tpl[1]
    2
    >>> tpl[1] = 5
    TypeError: 'tuple' object does not support item assignment
    >>> tpl.append(1)
    AttributeError: 'tuple' object has no attribute 'append'

Буквально, с туплом нельзя ничего сделать. Нельзя добавить элементы, нельзя удалить элементы, нельзя изменить существующие элементы.
Туплы используют тогда, когда элементы массива разнородны и не должны меняться внутри программы.
Листы используют тогда, когда элементы массива однородны и могут меняться внутри программы.

Например, набор точек на плоскости должен быть записан в лист -- все точки имеют одинаковый смысл, а набор может меняться. А вот сами точки должны быть туплами: они состоят из двух координат, х и у, которые принципиально различны. У точки не может внутри программы отрасти третья компонента, все точки на плоскости; из точки нельзя удалить одну из компонент так, что результат будет точкой.
Аналогичный пример -- это rgb кодировка цвета. Её нужно представить туплом, потому что компоненты массива несут разный смысл (интенсивность конкретного цвета), и меняться тупл толком не может.

Упражнение 3. Вращение квадрата
------------

Напишите функцию rotate_square(square, angle), которая принимает координаты вершин квадрата в виде листа туплов, вращает квадрат на угол angle относительно его центра и возращает координаты повёрнутого квадрата (тоже листом туплов).

Теория 3. Dict
--------

Dict, dictionary или словарь -- "отображение" одних элементов в другие. Проще всего воспринимать как словарь: есть какое-то понятие и соответствующее ему перевод/пояснение. Понятие называется ключом, перевод называется значением. То есть, словарь может получить ключ и сказать, какое значение ему соответствует.
Если вы ничего не поняли, это не страшно. Тут есть пример:

.. code-block:: python
    >>> dct = {'key': 'value', 'a': 'b', 1: 2}
    >>> dct['key']
    'value'
    >>> dct[1]
    2
    >>> dct['a']
    'b'
    >>> dct[1] = 'blah'
    >>> dct
    {'key': 'value', 'a': 'b', 1: 'blah'}
    >>> dct['value']
    KeyError: 'value'
    >>> dct['python'] = 'is awesome'
    >>> dct
    {'key': 'value', 'a': 'b', 1: 'blah', 'python': 'is awesome'}

 Здесь важно забыть про массивы и их индексы. Есть только ключи и соответствующие им значения.




Теория 4. Set
--------

Set -- это "множество", набор уникальных элементов. В отличие от массива, у элементов множества нет индексов, хотя по нему всё ещё можно пройтись циклом

.. code-block:: python
    >>> lst = [1, 1, 2, 3, 4, 5, 5, 5, 5]
    >>> set1 = set(lst)
    >>> set1
    {1, 2, 3, 4, 5}
    >>> set1.add(7)
    >>> set1
    {1, 2, 3, 4, 5, 7}
    >>> set1.add(3)
    >>> set1
    {1, 2, 3, 4, 5, 7}
    >>> set1[1]
    TypeError: 'set' object does not support indexing
    >>> list(set1)
    [1, 2, 3, 4, 5, 7]

Видно, что множество поддерживает уникальность значений в себе, может быть сделано из листа, может быть превращено в лист.

Упражнение -2. Удаление дублей
-------------

Напишите функцию, которая принимает лист с повторяющимися элементами и возвращает лист с уникальными элементами (теми же, что были в первом массиве).

Упражнение -1. Разность массивов
-------------

Напишите функцию, которая принимает на вход два массива и возвращает массив с теми элементами, которые были в первом массиве, но не во втором. Можно считать, что в исходных массивах все элементы уникальны.
PS: погуглите разность множеств, это довольно распространённая операция





Система управления версиями (CVS) - один из основных инструментов программиста. Система управления версиями позволяет хранить несколько версий одного и того же документа, при необходимости возвращаться к более ранним версиям, определять, кто и когда сделал то или иное изменение, и многое другое.

Git — одна из самых популярных систем контроля версиями (CVS). Автор git — `Линус Торвальдс`_.

.. _`Линус Торвальдс`: https://ru.wikipedia.org/wiki/%D0%A2%D0%BE%D1%80%D0%B2%D0%B0%D0%BB%D1%8C%D0%B4%D1%81,_%D0%9B%D0%B8%D0%BD%D1%83%D1%81

GitHub_ — крупнейший веб-сервис для хостинга IT-проектов и их совместной разработки.

.. _GitHub: https://ru.wikipedia.org/wiki/GitHub

Упражнение 1. Git
-----------------

Пройдите туториал и продемонстрируйте преподавателю тестовый репозиторий на гитхабе.

1. Зарегистрируйтесь на github.com_ с некоторым именем пользователя, например *Ivanov*
(тут и далее вместо *Ivanov* нужно подставлять имя вашего пользователя,
а вместо ivanov.ivan@phystech.edu вашу настоящую почту).

.. _github.com: https://github.com

2. Создаем новый репозиторий https://github.com/new (или значок `+` в правом верхнем углу):

   * В качестве имени репозитория задаем `infa_2019_ivanov`
   * Доступ оставляем *Public*
   * Не забываем поставить галочку *"Initialize this repository with a README"*

3. Откройте терминал (консоль) GNU/Linux или командную строку Git-bash_ под M$ Windows.
Теперь **git clone** — склонируем получившийся репозиторий на свой компьютер и зайдем в папку с репозиторием:

.. _Git-bash: https://gitforwindows.org/

.. code-block:: bash

    $ git clone https://github.com/Ivanov/infa_2019_ivanov
    Cloning into 'infa_2019_ivanov'...
    remote: Counting objects: 3, done.
    remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
    Unpacking objects: 100% (3/3), done.
    $ ls
    infa_2019_ivanov
    $ cd infa_2019_ivanov
    $ ls
    README.md

Не забудем сконфигурить гит, представившись ему (это обязательно нужно сделать находясь в папке `infa_2019_ivanov`):

.. code-block:: bash

    git config user.name "Ivanov Ivan"
    git config user.email ivanov.ivan@phystech.edu

Почту указываем как при регистрации.

4. Теперь у нас локально есть полная и независимая версия нашего репозитория `infa_2019_ivanov`. 
Она никак явным образом не связана с версией на серверах github'а, однако в гите существуют инструменты 
для обмена данными между разными репозиториями. Иными словами, git - это *распределенная* система управлениями версиями.

5. Команда **git log** возвращает историю нашего репозитория. В данный момент в нашей истории ровно один коммит (коммит - это некоторый набор изменений).

.. code-block:: bash

    -> git log
    commit eec733a21cerfb66973998a9327aab735fa40ba4
    Author: Ivanov <ivanov.ivan@phystech.edu>
    Date:   Wed Nov 9 13:36:38 2016 +0300

        Initial commit

6. Давайте отредактируем файл `README.md` и добавим в него что-нибудь. Откроем файл `README.md` и напишем в нем что-нибудь.
После с помощью **git diff** посмотрим на текущие изменения. В диффе видно, что была добавлена строчка "it's test project".

.. code-block:: bash

    -> git diff
    diff --git a/README.md b/README.md
    index 21e60f8..285eafa 100644
    --- a/README.md
    +++ b/README.md
    @@ -1 +1,3 @@
    -# infa_2019_ivanov
    \ No newline at end of file
    +# infa_2019_ivanov
    +
    +it's test project

7. Команда **git status** показывает текущий статус репозитория. Мы видим, что сейчас мы находимся в ветке `master` (основная ветка нашего репозитория).
Ниже написано, что файл `README.md` был изменен. Однако он ещё не готов для коммита.

.. code-block:: bash

    -> git status
    # On branch master
    # Changes not staged for commit:
    #   (use "git add <file>..." to update what will be committed)
    #   (use "git checkout -- <file>..." to discard changes in working directory)
    #
    #    modified:   README.md
    #
    no changes added to commit (use "git add" and/or "git commit -a")

8. Сделаем **git add**, как рекомендует нам команда status.

.. code-block:: bash

    -> git add README.md
    -> git status
    # On branch master
    # Changes to be committed:
    #   (use "git reset HEAD <file>..." to unstage)
    #
    #    modified:   README.md
    #

Теперь **git status** показывает, что изменения в файле `README.md` готовы для коммита. Если сейчас снова
измененить `README.md`, то нужно снова обязательно выполнить **git add**.

9. **git-commit** — закоммитим наши изменения, то есть внесём "квант" изменений в историю развития проекта:

.. code-block:: bash

    $ git commit -m "Added something to README"
    [master 274f6d5] Added something to README
     Committer: Ivanov Ivan <ivanov.ivan@phystech.edu>

     1 file changed, 3 insertions(+), 1 deletion(-)

10. Снова посмотрим (**git log**) на историю нашего репозитория:

.. code-block:: bash

    $ git log
    commit 8e2642d512b11ae43a97b0b4ac68e802d2626f14
    Author: Ivanov Ivan <ivanov.ivan@phystech.edu>
    Date:   Wed Nov 9 14:47:40 2016 +0300

        Added something to README

    commit eec733a21cerfb66973998a9327aab735fa40ba4
    Author: Ivanov Ivan <ivanov.ivan@phystech.edu>
    Date:   Wed Nov 9 13:36:38 2016 +0300

        Initial commit

Теперь в нашем репозитории два коммита.

11. Давайте сделаем **git push** — отправим ("запушим" на сленге программистов) наши изменения в оригинальный репозиторий на github.com.

.. code-block:: bash

    $ git push
    Username for 'https://github.com': <username>
    Password for 'https://ivanov@github.com': <password>
    To https://github.com/Ivanov/infa_2019_ivanov
       eec733a..8e2642d  master -> master

При git push необходимо будет ввести логин и пароль на GitHub (если, конечно, вы не настроили ssh-аутентификацию :-)).
Теперь изменения будут доступны для всех.

12. Существует парная команда **git pull** — которая забирает изменения с оригинального репозитория на сервере.

.. code-block:: bash

    $ git pull
    Already up-to-date.

Создание картинок с библиотекой `graph.py`
==========================================

На этом занятии вы будете рисовать графические объекты на языке Python.

`Вспомогательная библиотека графики`__ (`graph.py`), с помощью которой
мы будем отображать примитивные объекты на экране, написана `Константином Юрьевичем Поляковым`__.

.. __: http://kpolyakov.spb.ru/loadstat.php?f=/download/pygraph.zip
.. __: http://kpolyakov.spb.ru/dosie.htm


Установка и подключение библиотеки
----------------------------------

Откройте папку со своим репозиторием `infa_2019_ivanov`, который вы создали в GitHub и склонировали на локальный компьютер.

Создайте в нём *вложенную* папку `lab3`.

Нужно `скачать файл библиотеки`__ и положить в эту директорию, где вы будете далее писать свои программы, рисующие картинки.

.. __: {filename}/extra/lab3/graph.py

Чтобы импортировать возможности библиотеки `graph` в вашей программе нужно вставить:

.. code-block:: python

   from graph import *

Пример №1
+++++++++

Создадим простую картинку:

.. code-block:: python

   from graph import *

   penColor(255,0,255)
   penSize(5)
   brushColor("blue")
   rectangle(100, 100, 300, 200)
   brushColor("yellow")
   polygon([(100,100), (200,50), 
            (300,100), (100,100)])
   penColor("white")
   brushColor("green")
   circle(200, 150, 50)

   run()

Пример №2
+++++++++

Для создания штриховок можно использовать циклы:

.. code-block:: python

   from graph import *

   x1 = 100; y1 = 100
   x2 = 300; y2 = 200
   N = 10
   rectangle (x1, y1, x2, y2)
   h = (x2 - x1) / (N + 1)
   x = x1 + h
   for i in range(N):
     line(x, y1, x, y2)
     x += h

   run()

Задание №1 (пробное)
++++++++++++++++++++

Первое задание-картинка одинаковое у всех студентов. Нарисовать злой смайлик:

.. image:: ../images/lab3/angry_smile.png
    :align: center


Задание №2 (боевое)
+++++++++++++++++++

Второе задание-картинка у всех студентов *разное*.
Попросите преподавателя закрепить за вами одно из заданий.
Возможно, вам будет выдано отдельное задание, не из этого списка.

+------------------------+------------------------+
| **Картинка**           | **Сложность**          |
+------------------------+------------------------+
| 1_1.png_               |                        |
+------------------------+------------------------+
| 2_1.png_               |                        |
+------------------------+------------------------+
| 3_1.png_               |                        |
+------------------------+------------------------+
| 4_1.png_               |                        |
+------------------------+------------------------+
| 5_1.png_               |                        |
+------------------------+------------------------+
| 6_1.png_               |                        |
+------------------------+------------------------+
| 7_1.png_               |                        |
+------------------------+------------------------+
| 8_1.png_               |                        |
+------------------------+------------------------+
| 9_1.png_               |                        |
+------------------------+------------------------+
| 10_1.png_              |                        |
+------------------------+------------------------+
| 11_1.png_              |                        |
+------------------------+------------------------+
| 12_1.png_              |                        |
+------------------------+------------------------+
| 13_1.png_              |                        |
+------------------------+------------------------+
| 14_1.png_              |                        |
+------------------------+------------------------+
| 15_1.png_              |                        |
+------------------------+------------------------+
| 16_1.png_              |                        |
+------------------------+------------------------+
| 17_1.png_              |                        |
+------------------------+------------------------+

.. _1_1.png: ../images/lab3/1_1.png
.. _2_1.png: ../images/lab3/2_1.png
.. _3_1.png: ../images/lab3/3_1.png
.. _4_1.png: ../images/lab3/4_1.png
.. _5_1.png: ../images/lab3/5_1.png
.. _6_1.png: ../images/lab3/6_1.png
.. _7_1.png: ../images/lab3/7_1.png
.. _8_1.png: ../images/lab3/8_1.png
.. _9_1.png: ../images/lab3/9_1.png
.. _10_1.png: ../images/lab3/10_1.png
.. _11_1.png: ../images/lab3/11_1.png
.. _12_1.png: ../images/lab3/12_1.png
.. _13_1.png: ../images/lab3/13_1.png
.. _14_1.png: ../images/lab3/14_1.png
.. _15_1.png: ../images/lab3/15_1.png
.. _16_1.png: ../images/lab3/16_1.png
.. _17_1.png: ../images/lab3/17_1.png

**Важно!** Результат вашей работы *обязательно* нужно отправить в свой репозиторий:

.. code-block:: bash

   student@computer:~/$ cd infa_2019_ivanov
   student@computer:~/infa_2019_ivanov/$ git add lab3
   student@computer:~/infa_2019_ivanov/$ git commit -m "Классная работа. Нарисовал..." # здесь можно написать подробности
   student@computer:~/infa_2019_ivanov/$ git push

Задание №3 (на дом)
+++++++++++++++++++

Третье задание является усложнённой версией второго.
Вам придётся выполнить модификацию своей программы.
Если вы не успеете выполнить его на занятии, обязательно сделайте задание дома.

Для скачивания репозитория на домашнем компьютере используйте команду **git clone**, а в дальнейшем
для подтягивания изменений команду **git pull**.

+------------------------+------------------------+
| **Картинка**           | **Сложность**          |
+------------------------+------------------------+
| 1_2.png_               |                        |
+------------------------+------------------------+
| 2_2.png_               |                        |
+------------------------+------------------------+
| 3_2.png_               |                        |
+------------------------+------------------------+
| 4_2.png_               |                        |
+------------------------+------------------------+
| 5_2.png_               |                        |
+------------------------+------------------------+
| 6_2.png_               |                        |
+------------------------+------------------------+
| 7_2.png_               |                        |
+------------------------+------------------------+
| 8_2.png_               |                        |
+------------------------+------------------------+
| 9_2.png_               |                        |
+------------------------+------------------------+
| 10_2.png_              |                        |
+------------------------+------------------------+
| 11_2.png_              |                        |
+------------------------+------------------------+
| 12_2.png_              |                        |
+------------------------+------------------------+
| 13_2.png_              |                        |
+------------------------+------------------------+
| 14_2.png_              |                        |
+------------------------+------------------------+
| 15_2.png_              |                        |
+------------------------+------------------------+
| 16_2.png_              |                        |
+------------------------+------------------------+
| 17_2.png_              |                        |
+------------------------+------------------------+

.. _1_2.png: ../images/lab3/1_2.png
.. _2_2.png: ../images/lab3/2_2.png
.. _3_2.png: ../images/lab3/3_2.png
.. _4_2.png: ../images/lab3/4_2.png
.. _5_2.png: ../images/lab3/5_2.png
.. _6_2.png: ../images/lab3/6_2.png
.. _7_2.png: ../images/lab3/7_2.png
.. _8_2.png: ../images/lab3/8_2.png
.. _9_2.png: ../images/lab3/9_2.png
.. _10_2.png: ../images/lab3/10_2.png
.. _11_2.png: ../images/lab3/11_2.png
.. _12_2.png: ../images/lab3/12_2.png
.. _13_2.png: ../images/lab3/13_2.png
.. _14_2.png: ../images/lab3/14_2.png
.. _15_2.png: ../images/lab3/15_2.png
.. _16_2.png: ../images/lab3/16_2.png
.. _17_2.png: ../images/lab3/17_2.png

**Важно!** Результат вашей работы *обязательно* нужно отправить в свой репозиторий:

.. code-block:: bash

   student@computer:~/$ cd infa_2019_ivanov
   student@computer:~/infa_2019_ivanov/$ git add lab3
   student@computer:~/infa_2019_ivanov/$ git commit -m "Домашняя работа. Нарисовал..." # здесь можно написать подробности
   student@computer:~/infa_2019_ivanov/$ git push


Краткий справочник: команды модуля `graph`
==========================================

Этот краткий справочник содержит не полное описание функций модуля, а только *выборку, необходимую для выполнения задания*.
Полный справочник по `graph.py` может быть найден на сайте его автора_.

.. _автора: http://kpolyakov.spb.ru/school/probook/python.htm

Общее описание
--------------

Модуль graph – это набор функций, который представляет собой «обёртку» для создания учебных графических программ на языке Python на основе  виджета Canvas библиотеки Tkinter. 

Работа с окном
--------------

windowSize(width, height)
   установка ширины (width) и высоты (height) рабочей области окна.

width, height = windowSize()
   при вызове без параметров возвращает кортеж (width,height) с текущими размерами.

Команды рисования геометрических фигур
--------------------------------------

penSize(width)
   установка толщины пера; при вызове без параметров функция возвращает текущую толщину пера:
   width = penSize()

penColor(r, g, b)
   установка цвета пера; при вызове с тремя параметрами они воспринимаются как значения составляющих цвета в модели RGB (от 0 до 255).

penColor(color)
   установка цвета пера; при вызове с одним параметром цвет `color` может быть задан как символьная строка с названием цвета ("red",  "green" и т.д.) или как символьная строка с HTML-кодом цвета ("#FF00GFF") или как кортеж (r,g,b) со значениями составляющих цвета в модели RGB;
   
сolor = penColor()
   при вызове без параметров функция возвращает текущий цвет:

brushColor(r, g, b)
   установка цвета заливки; при вызове с тремя параметрами они воспринимаются как значения составляющих цвета в модели RGB (от 0 до 255).

brushColor(color)
   установка цвета заливки; при вызове с одним параметром  цвет color может быть задан как символьная строка с названием цвета ("red",  "green" и т.д.) или как символьная строка с HTML-кодом цвета ("#FF00GFF") или как кортеж (r,g,b) со значениями составляющих цвета в модели RGB

сolor = brushColor()
   при вызове без параметров функция возвращает текущий цвет заливки.

randColor()
   функция возвращает случайный цвет в виде символьной строки с HTML-кодом цвета ("#FF00GFF").

point(x, y)
   point(x, y, color)
   нарисовать точку цвета c с координатами (x,y); если цвет не задан, используется текущий цвет линии, установленный ранее с помощью команды penColor; функция возвращает ссылку на объект-точку.

moveTo(x, y)
   переместить исполнителя в точку, заданную координатами (x,y).

moveTo(pos)
   переместить исполнителя в точку, заданную кортежем pos=(x,y), составленным из двух координат.

lineTo(x, y)
   нарисовать линию из текущего положения исполнителя в точку, заданную координатами (x,y), составленным из этих координат; цвет линии определяется последней командой penColor; функция возвращает ссылку на объект-отрезок.
   
lineTo(pos)
   нарисовать линию из текущего положения исполнителя в точку, заданную координатами (x,y) или кортежем pos=(x,y), составленным из этих координат; цвет линии определяется последней командой penColor; функция возвращает ссылку на объект-отрезок.

line(x1, y1, x2, y2)
   нарисовать линию между точками с координатами (x1,y1) и (x2,y2); цвет линии определяется последней командой penColor; функция возвращает ссылку на объект-отрезок.

polyline(p)
   нарисовать ломаную линию по точками, заданным как массив кортежей p (каждый элемент массива – кортеж (x,y) координат очередной точки); цвет линии определяется последней командой penColor; функция возвращает ссылку на объект-ломаную.

polygon(points)
   нарисовать многоугольник с заливкой по точками, заданным как массив кортежей points (каждый элемент массива – кортеж (x,y) координат очередной точки); цвет контура и заливки определяются последними командами penColor и brushColor; функция возвращает ссылку на объект-многоугольник.

rectangle(x1, y1, x2, y2)
   нарисовать прямоугольник с координатами противолежащих углов (x1,y1) и (x2,y2); цвет контура и заливки определяются последними командами penColor и brushColor; функция возвращает ссылку на объект-прямоугольник.

circle(x, y, r)
   нарисовать окружность с заливкой с центром в точке (x,y) радиуса r; цвет контура и заливки определяются последними командами penColor и brushColor; функция возвращает ссылку на объект-окружность.
